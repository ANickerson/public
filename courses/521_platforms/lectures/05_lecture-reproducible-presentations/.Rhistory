summary(res.bestglm$BestModel)
knitr::opts_chunk$set(echo = TRUE)
# load libraries
library(leaps)
library(bestglm)
library(car)
library(tidyverse)
# read in previously saved data (saved in my notebook)
load("../data/logist_df.Rda")
dim(logist_df)
head(logist_df)
cv_log_model <- within(logist_df, {
y    <- X101
X101  <- NULL
X0  <- NULL
})
library(leaps)
library(ISLR)
library(car)
library(ggplot2)
hitters_regfit_fwd_models <- regsubsets(Salary ~ . , data = Hitters, nvmax = 19, method = "forward")
mean(Hitters$Salary)
mean(Hitters$Salary, na.rm = T)
Hitters$Salary > 500
Hitters$SalaryHiLo[Hitters$Salary > 500] <- "1"
library(leaps)
library(ISLR)
library(car)
library(ggplot2)
Hitters$SalaryHiLo[Hitters$Salary > 500] <- 1
Hitters$SalaryHiLo
Hitters$SalaryHiLo[Hitters$Salary <= 500] <- 0
Hitters$SalaryHiLo
Hitters$Salary
Hitters$SalaryHiLo <- as.factor(Hitters$SalaryHiLo)
Hitters$SalaryHiLo
test <- Hitters[complete.cases(Hitters),]
test$SalaryHiLo
?regsubsets
regsubsets(SalaryHiLo ~ . , data = test, nvmax = 19, method = "forward")
summary(regsubsets(SalaryHiLo ~ . , data = test, nvmax = 19, method = "forward"))
?lme
install.packages("nlme")
library(nlme)
?lme
head(mtcars)
m <- lme(mpg ~ hp, random = ~ 1 | gear, data = mtcars, method = "ML")
library(broom)
tidy(m)
summary(m)
glance(m)
install.packages("mice")
install.packages("viridis")
install.packages("VIM")
library(VIM)
install.packages("stargazer")
install.packages("AER")
install.packages("Amelia")
install.packages("GGally")
install.packages("reshape2")
install.packages("reshape2")
install.packages("CatterPlots")
install.packages("CatterPlots")
?list
baby_names <- list("Olivia", "Amelia", "Charlotte", "Isla", "Isabella")
baby_names
baby_names2 <- list(c("Olivia", "Amelia", "Charlotte", "Isla", "Isabella"))
baby_names2
baby_names1[1]
baby_names1 <- list("Olivia", "Amelia", "Charlotte", "Isla", "Isabella")
baby_names1
baby_names1[1]
baby_names1[1:3]
baby_names1[:3]
baby_names[0]
a = c(1,2,3)
a[0]
list()
numeric(0)
typeof(baby_names1)
?list()
?numeric(0)
typeof(list())
typeof(numeric(0))
baby_names1[:3]
baby_names[3:5]
baby_names[-2]
baby_names[-3]
baby_names[-4]
baby_names[-3:5]
baby_names[-1]
baby_names[-2]
baby_names[-1:-2]
n(baby_names1)
length(baby_names1)
baby_names[length(baby_names1)-3, length(baby_names1)]
baby_names[length(baby_names1)-3:length(baby_names1)]
baby_names[length(baby_names1)-2:length(baby_names1)]
baby_names[3:5]
baby_names1 <- list("Olivia", "Amelia", "Charlotte", "Isla", "Isabella")
baby_names1
baby_names1 <- list("Olivia", "Amelia", "Charlotte", "Isla", "Isabella")
baby_names1
baby_names[3:5]
baby_names[-1:-2] #index to not include
baby_names[length(baby_names1)-2:length(baby_names1)]
baby_names[(length(baby_names1)-2):length(baby_names1)]
baby_names[345]
baby_names1[-3]
baby_names1[1][1]
baby_names1[1][1][1]
baby_names1[1]
baby_names1[1,1]
source('~/Documents/DataCamp/audition/audition_ideas.R', echo=TRUE)
baby_names1[-1]
baby_names <- data.frame(girls = c("Olivia", "Amelia", "Charlotte", "Isla", "Isabella"))
source('~/Documents/DataCamp/audition/audition_ideas.R', echo=TRUE)
baby_names
source('~/Documents/DataCamp/data_camp_audition/audition_ideas.R', echo=TRUE)
source('~/Documents/DataCamp/data_camp_audition/audition_ideas.R', echo=TRUE)
baby_names[1,1]
baby_names[3, 2]
baby_names[1:3, 2]
nrow(girl_names)
baby_names[nrow(baby_names)]
baby_names[nrow(baby_names),]
baby_names[nrow(baby_names), 1:2]
baby_names
girl_names[]
girl_names
baby_names[3, 2]
source('~/Documents/DataCamp/data_camp_audition/audition_ideas.R', echo=TRUE)
baby_names[3, 2]
baby_names[1, ]
baby_names[ , 1]
baby_names[1:5, 1]
baby_names[ , 1] # also works - blank column means all
test <- list(1,2,3)
test
test[2] + test[1]
test[2][1] + test[1][1]
test[2][] + test[1][]
test[2]
test[[2]]
girl_names <- c("Olivia", "Amelia", "Charlotte", "Isla", "Isabella")
source('~/Documents/DataCamp/data_camp_audition/indexing_R.R', echo=TRUE)
girl_names <- c("Olivia", "Amelia", "Charlotte", "Isla", "Isabella")
girl_names
girl_names[1]
girl_names[3]
girl_names[5]
girl_names[nrow(girl_names)]
nrow(girl_names)
girl_names[length(girl_names)]
girl_names[0]
girl_names[2]
girl_names
girl_names <- c("Olivia", "Amelia", "Charlotte", "Isla", "Isabella")
girl_names[0]
girl_names <- c("Olivia", "Amelia", "Charlotte", "Isla", "Isabella")
girl_names[1]
girl_names[0]
girl_names[3]
girl_names <- c("Olivia", "Amelia", "Charlotte", "Isla", "Isabella")
girl_names[1]
girl_names[0]
girl_names[3]
girl_names <- c("Olivia", "Amelia", "Charlotte", "Isla", "Isabella")
girl_names[1]
girl_names[0]
girl_names[3]
girl_names[5]
girl_names[length(girl_names)]
girl_names[-1]
girl_names[1:3]
girl_names[:3]
girl_names[3:]
girl_names[length(girl_names)-2:length(girl_names)]
girl_names <- c("Olivia", "Amelia", "Charlotte", "Isla", "Isabella")
girl_names[1]
girl_names[0]
girl_names[3]
girl_names[length(girl_names)]
girl_names[-1]
girl_names[1:3]
girl_names[:3]
girl_names[3:]
girl_names[length(girl_names)-2:length(girl_names)]
baby_names <- data.frame(girls = c("Olivia", "Amelia", "Charlotte", "Isla", "Isabella"),
boys = c("Asher", "Atticus", "Jack", "Ezra", "Theodore"))
baby_names[1, 1]
baby_names[3, 2]
baby_names[1:3, 2]
baby_names[1:5, 1]
baby_names[ , 1]
baby_names[length(babynames), ]
baby_names[length(baby_names), ]
length(baby_names)
baby_names[nrow(baby_names), ]
baby_names <- data.frame(girls = c("Olivia", "Amelia", "Charlotte", "Isla", "Isabella"),
boys = c("Asher", "Atticus", "Jack", "Ezra", "Theodore"))
baby_names
baby_names[1, 1]
baby_names[3, 2]
baby_names[1:3, 2]
baby_names <- data.frame(girls = c("Olivia", "Amelia", "Charlotte", "Isla", "Isabella"),
boys = c("Asher", "Atticus", "Jack", "Ezra", "Theodore"))
baby_names[1, 1]
baby_names[3, 2]
baby_names[1:3, 2]
baby_names[ , 1]
baby_names[length(baby_names), ]
length(baby_names)
baby_names[nrow(baby_names), ]
baby_names <- data.frame(girls = c("Olivia", "Amelia", "Charlotte", "Isla", "Isabella"),
boys = c("Asher", "Atticus", "Jack", "Ezra", "Theodore"))
baby_names[3, 2]
baby_names[1:3, 2]
baby_names[ , 1]
baby_names[length(baby_names), ]
baby_names <- data.frame(girls = c("Olivia", "Amelia", "Charlotte", "Isla", "Isabella"),
boys = c("Asher", "Atticus", "Jack", "Ezra", "Theodore"))
baby_names[3, 2]
baby_names <- data.frame(girls = c("Olivia", "Amelia", "Charlotte", "Isla", "Isabella"),
boys = c("Asher", "Atticus", "Jack", "Ezra", "Theodore"))
baby_names <- data.frame(girls = c("Olivia", "Amelia", "Charlotte", "Isla", "Isabella"),
boys = c("Asher", "Atticus", "Jack", "Ezra", "Theodore"))
baby_names[3, 2]
baby_names[1:3, 2]
baby_names[ , 1]
baby_names[length(baby_names), ]
baby_names[nrow(baby_names), ]
baby_names <- data.frame(girls = c("Olivia", "Amelia", "Charlotte", "Isla", "Isabella"),
boys = c("Asher", "Atticus", "Jack", "Ezra", "Theodore"))
baby_names <- data.frame(girls = c("Olivia", "Amelia", "Charlotte", "Isla", "Isabella"),
boys = c("Asher", "Atticus", "Jack", "Ezra", "Theodore"))
baby_names[3, 2]
baby_names[1:3, 2]
baby_names[ , 1]
baby_names[length(baby_names), ]
length(baby_names)
baby_names[nrow(baby_names), ]
baby_names
source('~/Documents/DataCamp/data_camp_audition/indexing_R_demo_part2.R', echo=TRUE)
source('~/Documents/DataCamp/data_camp_audition/indexing_R_demo_part2.R', echo=TRUE)
source('~/Documents/DataCamp/data_camp_audition/indexing_R_demo_part2.R', echo=TRUE)
?desc
dplyr::desc()
?dplyr::desc
install.packages("rmarkdown")
install.packages("tidyverse")
install.packages("packrat")
user_renviron = path.expand(file.path("~", ".Renviron"))
user_renviron
.libPaths()
library(broom)
install.packages("class")
.libPaths()
devtools::install_github('IRkernel/IRkernel')
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
install.packages('tidyverse')
install.packages('tidyr')
presidents <- c("Trump", "Obama", "Bush", "Clinton", "Bush")
print(presidents)
presidents[3]
presidents[2:4]
start_year <- c(2016, 2008, 2000, 1992, 1988)
pres_term_start <- data.frame(presidents, start_year)
pres_term_start[1, 2]
pres_term_start
# create a data frame called pres_term_start that lists the last 5 US Presidents in order of recency
# as the year their term started.
presidents <- c("Trump", "Obama", "Bush", "Clinton", "Bush")
year <- c(2016, 2008, 2000, 1992, 1988)
pres_term_start <- data.frame(presidents, start_year)
print(pres_term_start)
pres_term_start[3, 1]
pres_term_start[1:3, 1]
pres_term_start[1:3, ]
pres_term_start[1:3, :]
presidents[]
pres_term_start[nrow(pres_term_start), ]
install.packages('reticulate')
print("Hello")
?suppressPackageStartupMessages
suppressPackageStartupMessages(testthat())
suppressPackageStartupMessages(library(testthat))
suppressPackageStartupMessages(library(c(testthat, dplyr)))
?library
lapply(c(testthat, dplyr), library, character.only = TRUE)
lapply(c("testthat", "dplyr"), library, character.only = TRUE)
lapply(c("testthat", "dplyr"), suppressPackageStartupMessages(library), character.only = TRUE)
lapply(c("testthat", "dplyr"), library, character.only = TRUE)
lapply(c("testthat", "dplyr", "devtools"), library, character.only = TRUE)
lapply(c("testthat", "dplyr"), suppressPackageStartupMessages(library), character.only = TRUE)
detach("package:devtools", unload=TRUE)
lapply(c("testthat", "dplyr"), suppressPackageStartupMessages(library), character.only = TRUE)
lapply(c("testthat", "dplyr"), library %>%  suppressPackageStartupMessages, character.only = TRUE)
lapply(c("testthat", "dplyr"), library, character.only = TRUE)
lapply(c("testthat", "devtools"), library %>%  suppressPackageStartupMessages, character.only = TRUE)
lapply(c("testthat", "dplyr"), library %>%  suppressMessages, character.only = TRUE)
lapply(c("testthat", "devtools"), library %>%  suppressMessages, character.only = TRUE)
detach("package:devtools", unload=TRUE)
lapply(c("testthat", "devtools"), library %>%  suppressMessages, character.only = TRUE)
detach("package:devtools", unload=TRUE)
lapply(c("testthat", "devtools"), library %>%  suppressWarnings, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages({
library(tidyverse)
library(ggplot2)
library(forcats) # fct_recode()
})
bcDat <- read_csv("data/clean-wdbc.data.csv")
tools:::print.xgettext
tools:::print.lm
:print.lm
print.lm
getAnywhere(print.lm)
add <- function(a, b){}
return (a + b)
add <- function(a, b){
return (a + b)
}
add(3,4)
getAnywhere(print.add)
add
add_source <- add
View(add_source)
print(add)
add_source <- print(add)
add_source = 5
getMethod("add")
add_source <- body(add)
add_source
grepl(add_source, "+")
grepl("+", add_source)
grepl("-", add_source)
grep("-", add_source)
grep("+", add_source)
?grep
grep("a", add_source)
grepl("a", add_source)
grepl("function", add_source)
library(stringr)
str_detect("+", add_source)
typeof("add_source")
str_detect(add_source, "+")
str_detect(as.character(add_source), "+")
typeof("add_source")
add_source
as.character(add_source)
grepl("function", add_source[2])
grepl("a", add_source[2])
grepl("return", add_source[2])
grepl("+", body(add)[2])
library(testthat)
test_that('function uses + operator', {
expect_that(grepl("+", body(add)[2]), is_true())
})
expect_that(grepl("-", body(add)[2]), is_true())
test_that('function uses + operator', {
expect_that(grepl("-", body(add)[2]), is_true())
})
a <- factor(c("character", "hits", "your", "eyeballs"))
(b <- factor(c("but", "integer", "where it", "counts")))
fbind <- function(a, b) {
factor(c(as.character(a), as.character(b)))
}
(grepl("+", body(fbind)[2])
)
body(fbind)
body(fbind)[2]
(grepl("!", body(fbind)[2]))
(grepl("as.character", body(fbind)[2]))
(grepl("+", body(fbind)[2]))
(grepl("\\+", body(fbind)[2]))
(grepl("\\.", body(fbind)[2]))
test_that('function should use + operator', {
expect_that(grepl("//+", body(add)[2]), is_true())
})
print("Success!")
test_that('function should use + operator', {
expect_that(grepl("/+", body(add)[2]), is_true())
})
"//+"
test_that('function should use + operator', {
expect_that(grepl("\\+", body(add)[2]), is_true())
})
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
?install.packages
?rbinom
rbinom(10, 1, 0.5)
rbinom(1, 10, 0.5)
rbinom(1, 10, 0.5)
rbinom(1, 10, 0.5)
rbinom(1, 10, 0.5)
rbinom(10, 10, 0.5)
flips <- rbinom(100000, 10, 0.5)
flipps == 5
mean(flips == 5)
flips <- 100000, 10, 0.5)
mean(flips <= 4)
flips <- rbinom(100000, 10, 0.5)
mean(flips <= 4)
dbinom(5, 10, 0.5)
pbinom(4, 10, 0.5)
hist(rbinom(10000, 10, 0.3))
mean(rbinom(100000, 100, 0.2)
)
X <- rbinom(100000, 100, 0.2)
var(X)
X <- rbinom(100000, 10, 0.5)
var(X)
10*.5
1 - 0.5
5 * .5
1*.5
1-.5
.5 * .5
library(plotly)
library(ggplot2)
data(mpg, package = "ggplot2")
str(mpg)
p <- plot_ly(mpg, x = ~cty, y = ~hwy, color = ~(as.factor(cyl)))
orca(p, "surface-plot.png")
source('~/.active-rstudio-document', echo=TRUE)
?orca''
?orca
orca(p, "surface-plot.png")
library(plotly)
library(ggplot2)
data(mpg, package = "ggplot2")
str(mpg)
p <- plot_ly(mpg, x = ~cty, y = ~hwy, color = ~(as.factor(cyl)))
orca(p, "surface-plot.png")
p <- plot_ly(z = ~volcano) %>% add_surface()
orca(p, "surface-plot.svg")
p <- plot_ly(mpg, x = ~cty, y = ~hwy, mode = lines, color = ~(as.factor(cyl)))
p
p <- plot_ly(mpg, x = ~cty, y = ~hwy, mode = lines)
(p <- plot_ly(mpg, x = ~cty, y = ~hwy, mode = lines))
(p <- plot_ly(mpg, x = ~cty, y = ~hwy, type = lines))
(p <- plot_ly(mpg, x = ~cty, y = ~hwy, mode = 'lines'))
(p <- plot_ly(mpg, x = ~cty, y = ~hwy, type = 'lines'))
(p <- plot_ly(mpg, x = ~cty, y = ~hwy, type = 'lines'))
(p <- plot_ly(mpg, x = ~cty, y = ~hwy, mode = 'lines'))
knitr::opts_chunk$set(echo = TRUE)
plot_ly(mpg, x = ~cty, y = ~hwy)
plot_ly(mpg, x = ~cty, y = ~hwy)
x <- 5
x <- x + 1
print(x)
# initialize sum to 0
sum <- 0
# loop of a sequence from 1 to 10 and calculate the sum
for (i in seq(1:10)){
sum <- sum + i
}
print(sum)
knitr::opts_chunk$set(echo = TRUE)
plot_ly(mpg, x = ~cty, y = ~hwy, mode = 'lines')
plot_ly(mpg, x = ~cty, y = ~hwy)
f <- api_create(p)
setwd("~/Documents/ubc-mds-2017/DSCI_521_platforms-dsci_instructors")
setwd("~/Documents/ubc-mds-2017/DSCI_521_platforms-dsci_instructors/release/lab3")
x <- 5
x <- x + 1
print(x)
plot(cars)
plot(cars)
unlink('lab3_cache', recursive = TRUE)
knit_with_parameters('~/Desktop/Untitled.Rmd')
?opts_chunk
class(opts_chunk)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
opts_chunk
knitr::opts_chunk
# some R code that throws a warning
cor( c( 1 , 1 ), c( 2 , 3 ) )
# some R code that throws a warning
cor( c( 1 , 1 ), c( 2 , 3 ) )
# some R code that throws a warning
cor( c( 1 , 1 ), c( 2 , 3 ) )
# some R code that throws a warning
cor( c(1, 1), c(2, 3) )
# some R code that throws a warning
cor( c(1, 1), c(2, 3) )
# some R code that throws a warning
cor( c(1, 1), c(2, 3) )
# some R code that throws a warning
cor( c( 1 , 1 ), c( 2 , 3 ) )
knitr::opts_chunk>cor
?cor
library(infer)
install.packages("infer")
library(infer)
bowl
install.packages("moderndive")
getwd()
library(tidyverse)
ggplot(data = mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = class))
?facet_grid
?facet_wrap
setwd("~/Documents/MDS-2018-19/DSCI_521_platforms-dsci_students/lectures/lecture5")
getwd()
